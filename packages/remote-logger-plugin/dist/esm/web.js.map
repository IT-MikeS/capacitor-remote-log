{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,sDAAsD;AAEtD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAY1C;QACI,KAAK,EAAE,CAAC;QAPL,aAAQ,GAAG,WAAW,CAAC;QACvB,SAAI,GAAG,IAAI,CAAC;QAGX,YAAO,GAAsB,SAAS,CAAC;QAK3C,IAAI,eAAe,CAAC,IAAI,KAAK,SAAS,EAAE;YACpC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC;YAE5B,eAAe,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YAChD,eAAe,CAAC,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YAClD,eAAe,CAAC,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;YACpD,eAAe,CAAC,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YAClD,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YAC9B,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YAChC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SACnC;QAGD,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAChG,CAAC;IAEM,KAAK,CAAC,EAAc;QACvB,QAAQ,EAAE,CAAC,KAAK,EAAE;YACd,KAAK,MAAM;gBAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBAAC,MAAM;YAC1C,KAAK,OAAO;gBAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBAAC,MAAM;YAC5C,KAAK,MAAM;gBAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBAAC,MAAM;YAC1C,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;SACjC;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,GAAG,CAAC,OAAY,EAAE,GAAG,IAAW;QACnC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACxD,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QACpC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACzD,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,OAAY,EAAE,GAAG,IAAW;QACrC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1D,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAEM,IAAI,CAAC,OAAY,EAAE,GAAG,IAAW;QACpC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACzD,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IAEM,UAAU,CAAC,OAAgB;QAC9B,IAAI,OAAe,CAAC;QACpB,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAE;YACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;SACpC;QACD,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,EAAE;YACf,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SAC5B;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE;YAC9B,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,SAAS;YACrC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;SAC/B,CAAC,CAAC;QAEH,cAAc;QACd,WAAW,CAAC,GAAG,EAAE;YACb,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;gBACpC,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACjC,IAAI,CAAC,GAAG,CAAC,kBAAkB,OAAO,EAAE,CAAC,CAAC;aACzC;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAW,EAAE,IAAS;QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;QACnD,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QACD,MAAM,SAAS,GAAG,UAAU,UAAU,GAAG,GAAG,EAAE,CAAC;QAC/C,IAAI;YACA,YAAY;YACZ,MAAM,QAAQ,GAAa,MAAM,KAAK,CAAC,SAAS,EAAE;gBAC9C,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACL,gEAAgE;oBAChE,cAAc,EAAE,kBAAkB;iBACrC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAC;SACN;QAAC,OAAM,CAAC,EAAE;YACP,gCAAgC;YAChC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;SACjF;IACL,CAAC;IAED,YAAY;IACJ,IAAI,CAAC,OAAY,EAAE,UAAe,EAAE,KAAU;QAClD,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,GAAG,GAAG,OAAO,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACrB,IAAI,GAAG,KAAK,EAAE,EAAE;gBACZ,GAAG,IAAI,GAAG,CAAC;aACd;YACD,IAAI,OAAO,OAAO,IAAI,QAAQ,EAAE;gBAC5B,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aAClC;iBAAM;gBACH,GAAG,IAAI,OAAO,CAAC;aAClB;QACL,CAAC,CAAC,CAAC;QACH,uEAAuE;QACvE,gCAAgC;QAEhC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,UAAU,CAAC,GAAG,EAAE;gBACZ,oFAAoF;gBACpF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAChC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YAC7B,CAAC,EAAE,GAAG,CAAC,CAAC;YACR,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,sBAAsB;IACxH,CAAC;IAEO,mBAAmB;QACvB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;SAC3C;QACD,MAAM,GAAG,GAAG,YAAY,CAAC,mBAAmB,CAAC;QAC7C,IAAI,EAAE,GAAW,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACnC,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;YAC1B,oCAAoC;YACpC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC;YAC3C,YAAY,CAAC,mBAAmB,GAAG,EAAE,CAAC;SACzC;QACD,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QACtC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;CACJ;AAED,MAAM,YAAY,GAAG,IAAI,eAAe,EAAE,CAAC;AAE3C,OAAO,EAAE,YAAY,EAAE,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { WebPlugin } from '@capacitor/core';\n\nimport type { Options, CapacitorRemoteLoggerPlugin, LogMessage } from './definitions';\n\nexport class RemoteLoggerWeb extends WebPlugin implements CapacitorRemoteLoggerPlugin {\n    private static that: any;\n    private static privateLog: (...data: any[]) => void;\n    private static privateWarn: (...data: any[]) => void;\n    private static privateError: (...data: any[]) => void;\n    private static privateInfo: (...data: any[]) => void;\n    public hostName = 'localhost';\n    public port = 8942;\n\n    private deviceIdentifier: string | undefined;\n    private pending: undefined | any[] = undefined;\n\n    constructor() {\n        super();\n\n        if (RemoteLoggerWeb.that === undefined) {\n            RemoteLoggerWeb.that = this;\n\n            RemoteLoggerWeb.privateLog = window.console.log;\n            RemoteLoggerWeb.privateWarn = window.console.warn;\n            RemoteLoggerWeb.privateError = window.console.error;\n            RemoteLoggerWeb.privateInfo = window.console.info;\n            window.console.log = this.log;\n            window.console.warn = this.warn;\n            window.console.error = this.error;\n            window.console.info = this.info;\n        }\n\n\n        this.notifyListeners('logStatusChange', { code: 'code', message: 'RemoteLogger Started.' });\n    }\n\n    public write(ob: LogMessage): Promise<void> {\n        switch (ob.level) {\n            case 'warn': this.warn(ob.message); break;\n            case 'error': this.error(ob.message); break;\n            case 'info': this.info(ob.message); break;\n            default: this.log(ob.message);\n        }\n        return Promise.resolve();\n    }\n\n    public log(message: any, ...args: any[]): void {\n        RemoteLoggerWeb.privateLog.call(this, message, ...args);\n        RemoteLoggerWeb.that.push(message, args, 'log');\n    }\n\n    public warn(message: any, ...args: any[]): void {\n        RemoteLoggerWeb.privateWarn.call(this, message, ...args);\n        RemoteLoggerWeb.that.push(message, args, 'warn');\n    }\n\n    public error(message: any, ...args: any[]): void {\n        RemoteLoggerWeb.privateError.call(this, message, ...args);\n        RemoteLoggerWeb.that.push(message, args, 'error');\n    }\n\n    public info(message: any, ...args: any[]): void {\n        RemoteLoggerWeb.privateInfo.call(this, message, ...args);\n        RemoteLoggerWeb.that.push(message, args, 'info');\n    }\n\n    public initialize(options: Options): Promise<void> {\n        let lastUrl: string;\n        if (options?.hostName) {\n            this.hostName = options.hostName;\n        }\n        if (options?.port) {\n            this.port = options.port;\n        }\n        this.post('/devices', {\n            id: this.getDeviceIdentifier(),\n            userAgent: window.navigator.userAgent,\n            title: window.document.title,\n        });\n\n        // Report urls\n        setInterval(() => {\n            if (document.location.href !== lastUrl) {\n                lastUrl = document.location.href;\n                this.log(`Url changed to ${lastUrl}`);\n            }\n        }, 1000);\n        return Promise.resolve();\n    }\n\n    async post(url: string, data: any): Promise<any> {\n        const remoteHost = this.hostName + ':' + this.port;\n        if (!data) {\n            return Promise.resolve();\n        }\n        const remoteUrl = `http://${remoteHost}${url}`;\n        try {\n            //@ts-ignore\n            const response: Response = await fetch(remoteUrl, {\n                method: 'post',\n                headers: {\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            });\n        } catch(e) {\n            // Logging should cause failures\n            RemoteLoggerWeb.privateLog.call(this, `Failed to post to ${remoteUrl}`, data);\n        }\n    }\n\n    //@ts-ignore\n    private push(message: any, _arguments: any, level: any): void {\n        const args = Array.prototype.slice.call(_arguments);\n        let msg = message;\n        args.forEach((element) => {\n            if (msg !== '') {\n                msg += ' ';\n            }\n            if (typeof element == 'object') {\n                msg += JSON.stringify(element);\n            } else {\n                msg += element;\n            }\n        });\n        // Commenting out for now. Stack is hard as it may be in the source map\n        //const stack = this.getStack();\n\n        if (!this.pending) {\n            setTimeout(() => {\n                // Push pending log entries. We wait around for 1 second to see how much accumulates\n                this.post('/log', this.pending);\n                this.pending = undefined;\n            }, 500);\n            this.pending = [];\n        }\n        this.pending.push({ id: this.getDeviceIdentifier(), message: msg, level, stack: undefined }); // this.getStack() });\n    }\n\n    private getDeviceIdentifier(): string {\n        if (this.deviceIdentifier) {\n            return this.deviceIdentifier.toString();\n        }\n        const tmp = localStorage.IonicLoggerDeviceId;\n        let id: number = parseInt(tmp, 10);\n        if (tmp == null || isNaN(id)) {\n            // Create a random device identifier\n            id = Math.floor(Math.random() * 999999999);\n            localStorage.IonicLoggerDeviceId = id;\n        }\n        this.deviceIdentifier = id.toString();\n        return id.toString();\n    }\n}\n\nconst RemoteLogger = new RemoteLoggerWeb();\n\nexport { RemoteLogger };\n"]}